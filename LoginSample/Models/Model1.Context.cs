//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LoginSample.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class designdbEntities : DbContext
    {
        public designdbEntities()
            : base("name=designdbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<GasReading> GasReadings { get; set; }
        public virtual DbSet<Graph> Graphs { get; set; }
        public virtual DbSet<house_detail> house_details { get; set; }
        public virtual DbSet<meter_detail> meter_details { get; set; }
        public virtual DbSet<meter_master> meter_masters { get; set; }
        public virtual DbSet<MeterType> MeterTypes { get; set; }
        public virtual DbSet<ProtocolType> ProtocolTypes { get; set; }
        public virtual DbSet<Register> Registers { get; set; }
        public virtual DbSet<site_detail> site_details { get; set; }
        public virtual DbSet<Table_1> Table_1 { get; set; }
        public virtual DbSet<Table_2> Table_2 { get; set; }
        public virtual DbSet<utility_tarrif_master> utility_tarrif_masters { get; set; }
        public virtual DbSet<Water> Waters { get; set; }
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Organo> Organoes { get; set; }
        public virtual DbSet<ddu_master> ddu_masters { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
    
        public virtual ObjectResult<charts_Result> charts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<charts_Result>("charts");
        }
    
        public virtual ObjectResult<Electricity_Result> Electricity(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string villa, Nullable<System.TimeSpan> time)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var villaParameter = villa != null ?
                new ObjectParameter("Villa", villa) :
                new ObjectParameter("Villa", typeof(string));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Electricity_Result>("Electricity", fromdateParameter, todateParameter, villaParameter, timeParameter);
        }
    
        public virtual ObjectResult<EMeter_Result> EMeter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EMeter_Result>("EMeter");
        }
    
        public virtual ObjectResult<GasMeter_Result> GasMeter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GasMeter_Result>("GasMeter");
        }
    
        public virtual ObjectResult<WaterMeter_Result> WaterMeter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WaterMeter_Result>("WaterMeter");
        }
    }
}
